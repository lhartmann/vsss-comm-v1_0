This textfile compiles general instructions and descriptions on how to use all algorithms and properly assemble 
communication between a receiving robot (or multiple robots) and a transmitting terminal.

\\Section 0 - The RF24.h Library

The class reference for the RF24.h library can be found below:
https://maniacbug.github.io/RF24/classRF24.html#aa7e8523f86f9f8f20c274e0c89a5fd45

To avoid time wasting, all classes used in both algorithms will be mentioned here:
RF24::RF24	
RF24::available
RF24::begin
RF24::openReadingPipe
RF24::openWritingPipe
RF24::setPALevel
RF24::startListening
RF24::stopListening
RF24::read
RF24::write

\\Section 1 - The Receiver - ufpbots_receptor.ino --------------------------------------------------------------------------------------

---
The first call in this function is to the header "config.h". 
All pre-defined values and pre-loop functions are found here for better code management.
---
CE and CSN values represent the Arduino Uno pin numbers (which may or may not coincide with ATMega328P pins) on which the Chip Enable
(CE) and Chip Select Not (CSN) from the nRF24L01+ module are connected, respectively. 
Altering these values WILL directly affect the communication success (a badly connected pair of CE and CSN will transmit random values
even when not supposed to transmit at all).
The first procedure to check for errors on an malfunction transmitter is to check individually CE and CSN values in their algorithmic
definitions and verify if these numbers match their physical connections.
For the printed circuit board used as receiver, algorithmic definitions for CE must always be 8 (meaning ATMega328P pin 14) and for
CSN must always be 7 (meaning ATMega328P pin 13). Any other values will make reception of data fail.
---
The variable "add1" describes the 5-byte hex value for the address on which transmitter and receiver will communicate themselves.
Since this type of connection is pipe-like, its extremely dangerous to connect multiple receivers or multiple transmitters on a same
pipe adress. However, a single transmitter can connect with up to 5 receivers and send them data simoutaneously.
This, however, open the possibility of cross-transmitting between two independent communication systems. So, to avoid this, all pipe
adresses connected to the same transmitter must share the same 4 MSB, meaning the pipe adress consists of a 4 byte part indicating the
network in which it belongs and the last 1 byte indicates the individual value of that unique pipe (a more clarifying example can be
found on the link for the RF24.h library)
---
The variable "robo_ID" is temporarily useless and defines the unique value correspondant to each individual robot. This can also be
used to identify their respective pipes to the transmitter, as all active robots should have an ID that is 1, 2 or 3.
---
The second call in the main file is "print.h", containing printMode() and printPayload() functions. Both functions, as well as the
entire header are meant to print details of the received data on a computer screen via serial port for debug purposes only and, thus,
are entirely optional.
In a near future, a switch will be implemented to turn ON/OFF this debug features, being OFF its default state. This way, receiving
robots might not need to deal with unhandled serial output data.
---
The third and most important header to be called is "bridgemap.h". As the name suggest, this header deals with how data is converted
and which h-bridge pins must receive which signal at any given time. The four values defined here represent the Arduino Pin numbers,
matching corresponding ATMega328P pins that are connected with the H-bridges. Each function here acts as a macro for a possible
logic in PWM values. For example, FRWD() represents Forward Logic (defined as 0d12) and will send both PWM values on the positive
poles of the two H-bridges.
---
The main file itself consists of a two-phase loop. The first phase receives the payload sent from the transmitter, where as the
second phase gets the robot corresponding values of logic, left pwm and right pwm based on its ID ("robo_ID") and interprets the
logic value to determine the direction in which both pwm must be sent, calling the corresponding function, defined in "bridgemap.h".

\\Section 2 - The Transmitter - ufpbots_transmissor4.ino

---
The transmitter is relatively simpler in comparison with the receiver. A call for the header "config.h", similar to the one found in
the receiver, is the first thing done. After that, the program initializes opening the radio and required amount of pipes to 
communicate with receivers. Entering the loop, the transmitter will always check if there is data on the serial input buffer. 
If so, it will first flush all previous data by filling the payload variable with zeros. Then, it will read incoming bytes until an
end marker is detected (currently the "newline" character) and call write(), which will send data stored on "payload" to all pipes
opened and afterwards, the loop will check again for incoming serial data.
---
\\Section 3 - Test Codes - ufpbots_spintest.ino & ufpbots_commtest_tx.ino

---
The Spin Test code is a simple test just to verify the connection between microcontroller and H-bridge and also to perform battery
duration tests. It consists of perpetually sending a 50% duty cycle pwm on both pairs of signal outputs, with opposite signs. Thus, 
the robot will remain rotating until turned off or until the battery gets weak enough, independent of external commands.
This code must be proggramed as a receiver.
---
The Comm Test code is meant to verify wireless communication on receivers as well as to test several levels of pwm intensity. This 
can also be used to measure values such as motor dead zones. The code works based on serial inputs, currently interpreting decimal
inputs of pwm (0 to 255) and ON and OFF inputs (! and @ respectively). In the near future, the code will also be able to detect 
logic inputs (such as "Forward" and "Rotate"), currently only walking forwards (but can be changed on the code if needed).
This code must be programmed as a transmitter and can only work in conjunction with a Serial Data Sender.

\\Section 4 - Pin Map for Reference

A spredsheet can be found on the following link correlating all Pin values with their respective signals. Their order is determined
by ATMEGA328P pins. Both transmitter and receiver use the same pin order.

https://docs.google.com/spreadsheets/d/1S-HYjoQ0JZglUjNXtvuoN4eJLmLxVKt3ZJmsTvoUEK0/edit?usp=sharing
